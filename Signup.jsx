import { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import api from "../config/api";

const Signup = () => {
    const[username,setUsername] = useState("");
    const [usernameStatus, setUsernameStatus] = useState(null);
    const token = localStorage.getItem('_key_');
  const [formData, setFormData] = useState({
    id: "", // UUID will be generated by backend
    university_email: "",
    personal_email: "",
    full_name: "",
    gender :"male",
    contact_number: "",
    skills: [],
    interests: [],
    password: "",
    profile_pic: "", // Optional
    university_id: "",
    role: "user",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  });
  
  const [universities, setUniversities] = useState([]);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    console.log("Fetching Universities.......");
    api.get("/api/universities/clg",{},{
        headers:{Authorization: `Bearer ${token}`},
  })
      .then(response => setUniversities(response.data))
      .catch(error => console.error("Error fetching universities:", error));
  }, []);
  useEffect(() => {
    if (username.length > 2) { 
        const checkUsername = async () => {
            try {
                const response = await api.get(`/api/auth/check-username?username=${username}`);
                setUsernameStatus(response.data); // âœ… Correct
            } catch (error) {
                console.error("Error checking username:", error);
            }
        };

      
        const timeout = setTimeout(checkUsername, 300); 
        return () => clearTimeout(timeout);
    } else {
        setUsernameStatus(null);
    }
}, [username]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "skills" || name === "interests") {
      setFormData({ ...formData, [name]: value.split(",") }); // Convert comma-separated values to array
    } 
    else if (name === "profile_pic") {
        console.log(e.target.files[0]);
        setFormData({ ...formData, profile_pic: e.target.files[0] }); // Store file object
      } else {
        setFormData({ ...formData, [e.target.name]: e.target.value });
      }
  
  };
  useEffect(() => {
    setFormData(prev => ({ ...prev, username }));
}, [username]);
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      const apiKey = "035b92eb71044a419adce6a927d61e83";
      const verifyResponse = await axios.get(
        `https://emailvalidation.abstractapi.com/v1/?api_key=${apiKey}&email=${formData.university_email}`
      );
      
      const isValidUniversityEmail =
        verifyResponse.data.is_valid_format?.value &&
        verifyResponse.data.is_disposable_email?.value === false &&
        verifyResponse.data.is_free_email?.value === false;

      if (!isValidUniversityEmail) {
        setError("Invalid university email. Please use an official university email.");
        setLoading(false);
        return;
      }
      
      const response = await api.post("/api/auth/signup", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      alert("Signup successful!");
      navigate("/login");
    } catch (err) {
      setError(err.response?.data?.error || "Signup failed");
    }

    setLoading(false);
  };

  return (
    <div>
      <h2>Signup</h2>
      {error && <p style={{ color: "red" }}>{error}</p>}
      {loading && <p>Verifying university email...</p>}
      <form onSubmit={handleSubmit}>
     <p>Username: <input type="text" name="username" placeholder="Username" onChange={(e)=>setUsername(e.target.value)} required /></p>
        {usernameStatus && (
                <p style={{ color: usernameStatus.available ? "green" : "red" }}>
                    {usernameStatus.message}
                </p>
            )}
        <p>College Mail: <input type="email" name="university_email" placeholder="University Email" onChange={handleChange} required /></p>
       <p>Email: <input type="email" name="personal_email" placeholder="Personal Email" onChange={handleChange} /></p>
       <p>Full Name: <input type="text" name="full_name" placeholder="Full Name" onChange={handleChange} required /></p>
       <p>Gender: <select name="gender" onChange={handleChange}>
          <option value="male">Male</option>
          <option value="female">Female</option>
        </select></p>
      <p>Phone Number :<input type="text" name="contact_number" placeholder="Contact Number" onChange={handleChange} required /></p>
       <p>Skills: <input type="text" name="skills" placeholder="Skills (comma-separated)" onChange={handleChange} /></p>
        <p>Interests: <input type="text" name="interests" placeholder="Interests (comma-separated)" onChange={handleChange} /></p>
       <p>Password: <input type="password" name="password" placeholder="Password" onChange={handleChange} required /></p>
       <p>Profile Image: <input type="file" name="profile_pic" accept="image/*" onChange={handleChange} required /></p>
        <p>Role: <select name="role" onChange={handleChange}>
          <option value="user">User</option>
          <option value="organizer">Organizer</option>
        </select></p>
       <p>University: <select name="university_id" onChange={handleChange} required>
          <option value="">Select University</option>
          {Array.isArray(universities) && universities.map((university) => (
            <option key={university.id} value={university.id}>
              {university.name}
            </option>
          ))}
        </select></p>
        <button type="submit" disabled={loading}>Signup</button>
      </form>
    </div>
  );
};

export default Signup;
